name: Build wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest]
        platform: [x64]
        PLAT: [i686, x86_64]
        exclude:
          - os: macos-latest # macos-10.15
            PLAT: i686
        include:
          - python-version: 3.7
            os: ubuntu-latest
            platform: aarch64
            PLAT: aarch64
          - python-version: 3.8
            os: ubuntu-latest
            platform: aarch64
            PLAT: aarch64
          - python-version: 3.9
            os: ubuntu-latest
            platform: aarch64
            PLAT: aarch64
    env:
      REPO_DIR: linearmodels
      PKG_NAME: linearmodels
      BUILD_COMMIT: "v4.24"
      PYPI_UPLOAD: true # true or false
      TESTPYPI_UPLOAD: false
      UNICODE_WIDTH: 32
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}
      MB_ML_VER: ${{ matrix.MB_ML_VER }}
      TRAVIS_REPO_SLUG: ${{ github.repository }}
      TRAVIS_BRANCH: ${{ github.head_ref }}
      TRAVIS_PULL_REQUEST: ${{ github.event.number }}
      TRAVIS_BUILD_DIR: ${{ github.workspace }}
      MKL_NUM_THREADS: 1
      OMP_NUM_THREADS: 1
      OPENLAS_NUM_THREADS: 1

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: docker/setup-qemu-action@v1
      if: ${{ matrix.platform == 'aarch64' }}
      name: Set up QEMU
    - name: Pin Numpy, Scipy and Pandas version
      run: |
        if [[ $TRAVIS_PYTHON_VERSION == "3.7" ]]; then
          echo "NP_BUILD_DEP=$(echo numpy==1.15.4)" >> $GITHUB_ENV;
        fi
        if [[ $TRAVIS_PYTHON_VERSION == "3.8" ]]; then
          echo "NP_BUILD_DEP=$(echo numpy==1.17.5)" >> $GITHUB_ENV;
        fi
        if [[ $TRAVIS_PYTHON_VERSION == "3.9" ]]; then
          echo "NP_BUILD_DEP=$(echo numpy==1.19.4)" >> $GITHUB_ENV;
        fi
        echo "NP_TEST_DEP=$(echo numpy==1.19.4)" >> $GITHUB_ENV;
        echo "SP_BUILD_DEP=$(echo scipy==1.5.4)" >> $GITHUB_ENV;
        echo "SP_TEST_DEP=$(echo scipy==1.5.4)" >> $GITHUB_ENV;
        echo "PANDAS_DEP=$(echo pandas==1.1.5)" >> $GITHUB_ENV;
    - name: Setup Environment variables
      run: |
        echo "Event type: ${{ github.event_name }}"
        if [[ ${TESTPYPI_UPLOAD} == "true" ]]; then
          echo "Upload to Test PyPI"
          echo "UPLOAD_USERNAME=$TESTPYPI_USERNAME" >> $GITHUB_ENV
          echo "UPLOAD_PASSWORD=$TESTPYPI_PASSWORD" >> $GITHUB_ENV
          echo "PYPI_UPLOAD=false" >> $GITHUB_ENV
          echo "TESTPYPI_UPLOAD=true" >> $GITHUB_ENV
        fi
        if [[ ${PYPI_UPLOAD} == "true" ]]; then
          echo "Upload to PyPI"
          echo "UPLOAD_USERNAME=$PYPI_USERNAME" >> $GITHUB_ENV
          echo "UPLOAD_PASSWORD=$PYPI_PASSWORD" >> $GITHUB_ENV
          echo "PYPI_UPLOAD=true" >> $GITHUB_ENV
          echo "TESTPYPI_UPLOAD=false" >> $GITHUB_ENV
        fi
        echo "BUILD_COMMIT=$BUILD_COMMIT" >> $GITHUB_ENV
        if [ "macos-latest" == "${{ matrix.os }}" ]; then
          echo "TRAVIS_OS_NAME=osx" >> $GITHUB_ENV
        else
          echo "TRAVIS_OS_NAME=${{ matrix.os }}" >> $GITHUB_ENV;
        fi
        echo "BUILD_DEPENDS=$(echo $NP_BUILD_DEP $SP_BUILD_DEP $PANDAS_DEP cython statsmodels xarray pyhdfe)" >> $GITHUB_ENV;
        if [ "aarch64" == "${{ matrix.platform }}" ]; then
          echo "MB_ML_VER=2014" >> $GITHUB_ENV
        fi
        echo "TEST_DEPENDS=$(echo $NP_TEST_DEP $SP_TEST_DEP $PANDAS_DEP nose pytest pytest-xdist statsmodels patsy property_cached mypy_extensions pytest jupyter jupyter_client nbformat nbconvert==5.6.1 pytest-xdist pyhdfe)" >> $GITHUB_ENV;
        if [ "aarch64" == "${{ matrix.platform }}" ]; then
          echo "DOCKER_TEST_IMAGE=$(echo multibuild/xenial_arm64v8)" >> $GITHUB_ENV
        else
          echo "DOCKER_TEST_IMAGE=$(echo multibuild/xenial_${{ matrix.PLAT}})" >> $GITHUB_ENV;
        fi
    - name: Print some Environment variable
      run: |
        echo "ANACONDA_ORG: ${ANACONDA_ORG}"
        echo "TRAVIS_BRANCH: ${TRAVIS_BRANCH}"
        echo "TRAVIS_PULL_REQUEST: ${TRAVIS_PULL_REQUEST}"
        echo "TRAVIS_REPO_SLUG: ${TRAVIS_REPO_SLUG}"
        echo "TRAVIS_EVENT_TYPE: ${TRAVIS_EVENT_TYPE}"
        echo "TRAVIS_OS_NAME: ${TRAVIS_OS_NAME}"
        echo "NP_BUILD_DEP: ${NP_BUILD_DEP}"
        echo "NP_TEST_DEP: ${NP_TEST_DEP}"
        echo "SP_BUILD_DEP: ${SP_BUILD_DEP}"
        echo "SP_TEST_DEP: ${SP_TEST_DEP}"
        echo "PANDAS_DEP: ${PANDAS_DEP}"
        echo "PLAT: ${{ matrix.PLAT }}"
        echo "DOCKER_TEST_IMAGE: ${DOCKER_TEST_IMAGE}"
        echo "BUILD_DEPENDS: ${BUILD_DEPENDS}"
        echo "TEST_DEPENDS: ${TEST_DEPENDS}"
        echo "PYPI_UPLOAD: ${PYPI_UPLOAD}"
        echo "TESTPYPI_UPLOAD: ${TESTPYPI_UPLOAD}"
    - name: Install VirtualEnv
      run: |
        python -m pip install --upgrade pip
        pip install virtualenv
    - name: Build, Install and Test
      run: |
        source multibuild/common_utils.sh
        source multibuild/travis_steps.sh
        echo "------ BEFORE INSTALL ---------"
        before_install
        echo "------ CLEAN CODE --------"
        clean_code $REPO_DIR $BUILD_COMMIT
        echo "------ BUILD WHEEL --------"
        build_wheel $REPO_DIR ${{ matrix.PLAT }}
        echo "------ INSTALL RUN --------"
        install_run ${{ matrix.PLAT }}
    - name: Upload wheels
      if: always()
      run: source twine-upload.sh
      env:
        TESTPYPI_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
        TESTPYPI_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

